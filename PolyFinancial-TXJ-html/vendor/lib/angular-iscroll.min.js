/**
 * @license angular-iscroll v3.6.1, 2018-01-21T00:22:30+0100
 * (c) 2018 Martin Thorsen Ranang <mtr@ranang.org>
 * License: MIT
 */
!function(e,r){"function"==typeof define&&define.amd?define(["iscroll","platform"],r):"object"==typeof exports?module.exports=r(require("iscroll"),require("platform")):e.angularIscroll=r(e.IScroll,e.platform)}(this,function(e,r){"use strict";a.$inject=["$rootScope","$timeout","$interval","iScrollSignals","iScrollService"];var l={on:"iscroll-on",off:"iscroll-off"},n={},i=angular.isDefined(r)&&function(e){if("Opera Mini"===e.name)return!1;if("IE Mobile"===e.name)return o(e.version,"11.0")>=0;switch(e.os.family){case"Android":return"Chrome Mobile"===e.name||o(e.os.version,"4.0.4")>=0;case"iOS":return o(e.version,"5.1")>=0;default:return!0}}(r);
/**
     * Compares two software version numbers (e.g. "1.7.1" or "1.2b").
     *
     * This function was born in http://stackoverflow.com/a/6832721.
     *
     * @param {string} v1 The first version to be compared.
     * @param {string} v2 The second version to be compared.
     * @param {object} [options] Optional flags that affect comparison behavior:
     * <ul>
     *     <li>
     *         <tt>lexicographical: true</tt> compares each part of the version strings lexicographically instead of
     *         naturally; this allows suffixes such as "b" or "dev" but will cause "1.10" to be considered smaller than
     *         "1.2".
     *     </li>
     *     <li>
     *         <tt>zeroExtend: true</tt> changes the result if one version string has less parts than the other. In
     *         this case the shorter string will be padded with "zero" parts instead of being considered smaller.
     *     </li>
     * </ul>
     * @returns {number|NaN}
     * <ul>
     *    <li>0 if the versions are equal</li>
     *    <li>a negative integer iff v1 < v2</li>
     *    <li>a positive integer iff v1 > v2</li>
     *    <li>NaN if either version string is in the wrong format</li>
     * </ul>
     *
     * @copyright by Jon Papaioannou (["john", "papaioannou"].join(".") + "@gmail.com")
     * @license This function is in the public domain. Do what you want with it, no strings attached.
     */function o(e,r,l){var n=l&&l.lexicographical,i=l&&l.zeroExtend,o=e.split("."),t=r.split(".");function a(e){return(n?/^\d+[A-Za-z]*$/:/^\d+$/).test(e)}if(!o.every(a)||!t.every(a))return NaN;if(i){for(;o.length<t.length;)o.push("0");for(;t.length<o.length;)t.push("0")}n||(o=o.map(Number),t=t.map(Number));for(var c=0;c<o.length;++c){if(t.length==c)return 1;if(o[c]!=t[c])return o[c]>t[c]?1:-1}return o.length!=t.length?-1:0}function t(e){e()}function a(r,i,o,a,c){function s(e,r){i(function(){e.refresh()},r.directive.asyncRefreshDelay,r.directive.invokeApply)}return{restrict:"A",link:function(i,u,f){var d={iScroll:angular.extend({},c.defaults.iScroll,i.iscroll||{}),directive:angular.extend({},c.defaults.directive)};function v(){u.hasClass(l.on)||function(i,c,u,f){var d=new e(c[0],f.iScroll),v=!0,h=null;function g(){null!==h&&o.cancel(h),angular.isDefined(i.iscrollInstance)&&delete i.iscrollInstance,d.destroy(),c.removeClass(l.on).addClass(l.off),c.children(".iscroll-scroller").attr("style",null),angular.forEach(p,t)}function S(){v&&(v=!1,s(d,f),v=!0)}angular.forEach(n,function(e,r){angular.isDefined(f.directive[r])&&d.on(e,f.directive[r])}),c.removeClass(l.off).addClass(l.on),angular.isDefined(u.iscrollInstance)&&(i.iscrollInstance=d),!1!==f.directive.asyncRefreshDelay&&s(d,f),d.on("scrollStart",function(){v=!1}),d.on("scrollEnd",function(){v=!0}),!1!==f.directive.refreshInterval&&(h=o(S,f.directive.refreshInterval,0,f.directive.invokeApply));var p=[r.$on(a.disabled,g),r.$on(a.refresh,S),i.$on("$destroy",g)]}(i,u,f,d)}angular.forEach(d.iScroll,function(e,r){(c.defaults.directive.hasOwnProperty(r)||n.hasOwnProperty(r))&&(d.directive[r]=e,delete d.iScroll[r])});var h=[r.$on(a.enabled,v)];c.state.useIScroll?v():u.removeClass(l.on).addClass(l.off),i.$on("$destroy",function(){angular.forEach(h,t)})},scope:{iscroll:"=",iscrollInstance:"="}}}return angular.forEach(["beforeScrollStart","scrollCancel","scrollStart","scroll","scrollEnd","flick","zoomStart","zoomEnd"],function(e){var r;this["on"+(r=e,r.substring(0,1).toLocaleUpperCase()+r.substring(1))]=e},n),angular.module("angular-iscroll",[]).directive("iscroll",a).provider("iScrollService",function(){l.$inject=["$rootScope","iScrollSignals"];var e={iScroll:{momentum:!0,mouseWheel:!0},directive:{initiallyEnabled:!i,asyncRefreshDelay:0,refreshInterval:!1,invokeApply:!1}};function l(l,n){var t={useIScroll:e.directive.initiallyEnabled,autoDetectedUseNativeScroll:i};function a(e){e||(t.useIScroll=!1),l.$emit(n.disabled)}function c(e){e||(t.useIScroll=!0),l.$emit(n.enabled)}return{defaults:e,state:t,versionCompare:o,platform:r,enable:c,disable:a,toggle:function(e){t.useIScroll^e?a(e):c(e)},refresh:function(e){l.$emit(n.refresh,e)}}}angular.forEach(n,function(e,r){this[r]=void 0},e.directive),this.useNativeScroll=i,this.platform=r,this.configureDefaults=function(r){angular.isDefined(r.directive)&&angular.extend(e.directive,r.directive),angular.isDefined(r.iScroll)&&angular.extend(e.iScroll,r.iScroll)},this.getDefaults=function(){return e},this.$get=l}).constant("iScrollSignals",{disabled:"iscroll:disabled",enabled:"iscroll:enabled",refresh:"iscroll:refresh"})});